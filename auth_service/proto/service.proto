syntax = "proto3";

option go_package = "./;proto";

// protoc --go_out=plugins=grpc:. *.proto

package main;

message Nothing {
    bool dummy = 1;
}

message Event {
    int64  timestamp = 1;
    string host      = 2;
    string method    = 3;
    int32  code      = 4;
    string err       = 5;
}

service Admin {
    rpc Logging (Nothing) returns (stream Event) {}
}

message RegisterUserData {
    string fname    	= 1;
	string lname    	= 2;
    string email 		= 3;
    string password   	= 4;
	string organisation = 5;
}
message ReqUserData {
    string email 		= 1;
    string password   	= 2;
}
message UpdateUserData {
	string fname    	= 1;
	string lname    	= 2;
  	string organisation = 3;
	AccessToken access_token = 4;
}

message RespUserData {
    int64  id       = 1;
    string email    = 2;
    bool   admin    = 3;
}
message RespDeleteUser {
	string status = 1;
}
message Tokens {
    string access_token     = 1;
    string refresh_token    = 2;
    int64  access_expires   = 3;
}

message AccessToken {
    string access_token = 1;
}

message RefreshToken {
    string refresh_token = 1;
}

message Secret {
	int32 secret_id = 1;
	string secret_key = 2;
	string expire_date = 3;
	string created_at = 4;
}

message Secrets {
	repeated Secret secrets = 1;
}
message ReqDeleteSecret {
	int32 secret_id = 1;
	AccessToken access_token = 2;

}
message RespGetSecretExpire {
	string status = 1;
}

message ReqGetSecretExpire {
	int32 secret_id = 1;
	AccessToken access_token = 2;

}
service Auth {
    rpc Register(RegisterUserData) returns(Tokens) {}
    rpc Login(ReqUserData) returns(Tokens) {}
    rpc Profile(AccessToken) returns(RespUserData) {}
	rpc ProfileDelete(AccessToken) returns(RespDeleteUser) {}
	rpc ProfileUpdate(UpdateUserData) returns(RegisterUserData) {}

	rpc CreateSecret(AccessToken) returns(Secret) {}
	rpc GetSecret(ReqGetSecretExpire) returns(RespGetSecretExpire) {}
	rpc GetSecrets(AccessToken) returns(Secrets) {}

	rpc DeleteSecret(ReqDeleteSecret) returns(Secrets) {}

    rpc RefreshTokens(RefreshToken) returns(Tokens) {}
}

